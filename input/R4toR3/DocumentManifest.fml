/// url = "http://hl7.org/fhir/uv/xver/StructureMap/DocumentManifest4to3"
/// name = "DocumentManifest4to3"
/// title = "DocumentManifest Transforms: R4 to R3"
/// status = "active"

uses "http://hl7.org/fhir/4.0/DocumentManifest" alias DocumentManifest as source
uses "http://hl7.org/fhir/3.0/DocumentManifest" alias DocumentManifestR3 as target

imports "http://hl7.org/fhir/uv/xver/StructureMap/*4to3"

group DocumentManifest(source src : DocumentManifest, target tgt : DocumentManifestR3) extends DomainResource <<type+>> {
  src.masterIdentifier -> tgt.masterIdentifier;
  src.identifier -> tgt.identifier;
  src.status -> tgt.status;
  src.type -> tgt.type;
  src.subject -> tgt.subject;
  src.created -> tgt.created;
  src.author -> tgt.author;
  src.recipient -> tgt.recipient;
  src.source -> tgt.source;
  src.description -> tgt.description;
  src.content as s -> tgt.content as t then content(s, t);
  src.related as s -> tgt.related as t then DocumentManifestRelated(s, t);
}

group DocumentManifestAgent(source src, target tgt) extends BackboneElement {
  src.who as vs0 then Reference(vs0, tgt);
}

group content(source src, target tgt) extends Element {
  src.extension as s where url = 'http://hl7.org/fhir/3.0/StructureDefinition/extension-DocumentManifest.content.p_Attachment' then contentAttachment(s, tgt);
  src where extension.where(url = 'http://hl7.org/fhir/3.0/StructureDefinition/extension-DocumentManifest.content.p_Attachment').empty() -> tgt.p = create('Reference') as p then Reference(src, p) "attachment";
}

group contentAttachment(source src, target tgt) extends Element {
  src.value : Attachment as s -> tgt.p = create('Attachment') as t then Attachment(s, t) "valueAttachment";
}

group DocumentManifestRelated(source src, target tgt) extends BackboneElement {
  src.identifier -> tgt.identifier;
  src.ref -> tgt.ref;
}

