/// url = "http://hl7.org/fhir/uv/xver/StructureMap/CapabilityStatement3to2"
/// name = "CapabilityStatement3to2"
/// title = "CapabilityStatement Transforms: R3 to R2"
/// status = "active"

uses "http://hl7.org/fhir/3.0/StructureDefinition/CapabilityStatement" alias CapabilityStatement as source
uses "http://hl7.org/fhir/1.0/StructureDefinition/Conformance" alias ConformanceR2 as target

imports "http://hl7.org/fhir/uv/xver/StructureMap/*3to2"

group CapabilityStatement(source src : CapabilityStatement, target tgt : ConformanceR2) extends DomainResource <<type+>> {
  src.url -> tgt.url "confUrl";
  src.version -> tgt.version "confVersion";
  src.name -> tgt.name "confName";
  src.status -> tgt.status "confStatus";
  src.experimental -> tgt.experimental "confExperimental";
  src.publisher -> tgt.publisher "confPublisher";
  src.contact as vs -> tgt.contact as vt then CapabilityStatementContact(vs, vt) "confContact";
  src.date -> tgt.date "confDate";
  src.description -> tgt.description "confDescription";
  src.purpose -> tgt.requirements "confRequirements";
  src.copyright -> tgt.copyright "confCopyright";
  src.kind -> tgt.kind "confKind";
  src.software as vs -> tgt.software as vt then software(vs, vt) "confSoftware";
  src.implementation as vs -> tgt.implementation as vt then implementation(vs, vt) "confImplementation";
  src.fhirVersion -> tgt.fhirVersion "confFhirVersion";
  src.acceptUnknown -> tgt.acceptUnknown "confAcceptUnknown";
  src.format -> tgt.format "confFormat";
  src.profile -> tgt.profile "confProfile";
  src.rest as vs -> tgt.rest as vt then rest(vs, vt) "confRest";
  src.messaging as vs -> tgt.messaging as vt then messaging(vs, vt) "confMessaging";
  src.document as vs -> tgt.document as vt then document(vs, vt) "confDocument";
}

group CapabilityStatementContact(source src, target tgt) extends Element {
  src.name -> tgt.name "confName";
  src.telecom -> tgt.telecom "confTelecom";
}

group software(source src, target tgt) extends BackboneElement {
  src.name -> tgt.name "confName";
  src.version -> tgt.version "confVersion";
  src.releaseDate -> tgt.releaseDate "confReleaseDate";
}

group implementation(source src, target tgt) extends BackboneElement {
  src.description -> tgt.description "confDescription";
  src.url -> tgt.url "confUrl";
}

group rest(source src, target tgt) extends BackboneElement {
  src.mode -> tgt.mode "confMode";
  src.documentation -> tgt.documentation "confDocumentation";
  src.security as vs -> tgt.security as vt then security(vs, vt) "confSecurity";
  src.resource as vs -> tgt.resource as vt then restResource(vs, vt) "confResource";
  src.interaction as vs where (($this = 'batch') or ($this = 'transaction')).not() -> tgt.interaction as vt then interaction(vs, vt) "confInteraction";
  src where src.interaction.where($this = 'transaction').exists() and src.interaction.where($this = 'batch').exists() -> tgt.transactionMode = 'both' "confTransactionMode-1";
  src where src.interaction.where($this = 'transaction').exists() and src.interaction.where($this = 'batch').empty() -> tgt.transactionMode = 'transaction' "confTransactionMode-2";
  src where src.interaction.where($this = 'transaction').empty() and src.interaction.where($this = 'batch').exists() -> tgt.transactionMode = 'batch' "confTransactionMode-3";
  src where src.interaction.where($this = 'transaction').empty() and src.interaction.where($this = 'batch').empty() -> tgt.transactionMode = 'none' "confTransactionMode-4";
  src.searchParam as vs -> tgt.searchParam as vt then searchParam(vs, vt) "confSearchParam";
  src.operation as vs -> tgt.operation as vt then CapabilityStatementRestOperation(vs, vt) "confOperation";
  src.compartment -> tgt.compartment "confCompartment";
}

group security(source src, target tgt) extends BackboneElement {
  src.cors -> tgt.cors "confCors";
  src.service -> tgt.service "confService";
  src.description -> tgt.description "confDescription";
  src.certificate as vs -> tgt.certificate as vt then certificate(vs, vt) "confCertificate";
}

group certificate(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type "confType";
  src.blob -> tgt.blob "confBlob";
}

group restResource(source src, target tgt) extends BackboneElement {
  src.type where $this != 'CapabilityStatement' -> tgt.type "confType2";
  src.type where $this = 'CapabilityStatement' -> tgt.type = 'Conformance' "confType3";
  src.profile -> tgt.profile "confProfile";
  src.interaction as vs -> tgt.interaction as vt then interaction(vs, vt) "confInteraction";
  src.versioning -> tgt.versioning "confVersioning";
  src.readHistory -> tgt.readHistory "confReadHistory";
  src.updateCreate -> tgt.updateCreate "confUpdateCreate";
  src.conditionalCreate -> tgt.conditionalCreate "confConditionalCreate";
  src.conditionalUpdate -> tgt.conditionalUpdate "confConditionalUpdate";
  src.conditionalDelete -> tgt.conditionalDelete "confConditionalDelete";
  src.searchInclude -> tgt.searchInclude "confSearchInclude";
  src.searchRevInclude -> tgt.searchRevInclude "confSearchRevInclude";
  src.searchParam as vs -> tgt.searchParam as vt then searchParam(vs, vt) "confSearchParam";
}

group interaction(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code "confCode";
  src.documentation -> tgt.documentation "confDocumentation";
}

group searchParam(source src, target tgt) extends BackboneElement {
  src.name -> tgt.name "confName";
  src.definition -> tgt.definition "confDefinition";
  src.type -> tgt.type "confType4";
  src.documentation -> tgt.documentation "confDocumentation";
}

group CapabilityStatementRestOperation(source src, target tgt) extends BackboneElement {
  src.name -> tgt.name "confName";
  src.definition -> tgt.definition "confDefinition";
}

group messaging(source src, target tgt) extends BackboneElement {
  src.endpoint as vs -> tgt.endpoint as vt then endpoint(vs, vt) "confEndpoint";
  src.reliableCache -> tgt.reliableCache "confReliableCache";
  src.documentation -> tgt.documentation "confDocumentation";
  src.event as vs -> tgt.event as vt then event(vs, vt) "confEvent";
}

group endpoint(source src, target tgt) extends BackboneElement {
  src.protocol -> tgt.protocol "confProtocol";
  src.address -> tgt.address "confAddress";
}

group event(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code "confCode";
  src.category -> tgt.category "confCategory";
  src.mode -> tgt.mode "confMode";
  src.focus -> tgt.focus "confFocus";
  src.request -> tgt.request "confRequest";
  src.response -> tgt.response "confResponse";
  src.documentation -> tgt.documentation "confDocumentation";
}

group document(source src, target tgt) extends BackboneElement {
  src.mode -> tgt.mode "confMode";
  src.documentation -> tgt.documentation "confDocumentation";
  src.profile -> tgt.profile "confProfile";
}

