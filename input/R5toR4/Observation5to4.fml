/// url = "http://hl7.org/fhir/uv/xver/StructureMap/Observation5to4"
/// name = "Observation5to4"
/// title = "Observation Transforms: R5 to R4"
/// status = "active"

uses "http://hl7.org/fhir/5.0/Observation" alias ObservationR5 as source
uses "http://hl7.org/fhir/4.0/Observation" alias ObservationR4 as target

imports "http://hl7.org/fhir/uv/xver/StructureMap/*5to4"

group Observation(source src : ObservationR5, target tgt : ObservationR4) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier;
  src.basedOn -> tgt.basedOn;
  src.partOf -> tgt.partOf;
  src.status as v -> tgt.status = translate(v, 'http://hl7.org/fhir/uv/xver/ConceptMap/Observation.status-5to4', 'code');
  src.category -> tgt.category;
  src.code -> tgt.code;
  src.subject -> tgt.subject;
  src.focus -> tgt.focus;
  src.encounter -> tgt.encounter;
  src.effective : dateTime -> tgt.effective "effectiveDateTime";
  src.effective : Period -> tgt.effective "effectivePeriod";
  src.effective : Timing -> tgt.effective "effectiveTiming";
  src.effective : instant -> tgt.effective "effectiveInstant";
  src.issued -> tgt.issued;
  src.performer -> tgt.performer;
  src.value : Quantity -> tgt.value "valueQuantity";
  src.value : CodeableConcept -> tgt.value "valueCodeableConcept";
  src.value : string -> tgt.value "valueString";
  src.value : boolean -> tgt.value "valueBoolean";
  src.value : integer -> tgt.value "valueInteger";
  src.value : Range -> tgt.value "valueRange";
  src.value : Ratio -> tgt.value "valueRatio";
  src.value : SampledData -> tgt.value "valueSampledData";
  src.value : time -> tgt.value "valueTime";
  src.value : dateTime -> tgt.value "valueDateTime";
  src.value : Period -> tgt.value "valuePeriod";
  src.dataAbsentReason -> tgt.dataAbsentReason;
  src.interpretation -> tgt.interpretation;
  src.note -> tgt.note;
  src.bodySite -> tgt.bodySite;
  src.method -> tgt.method;
  src.specimen -> tgt.specimen;
  src.device -> tgt.device;
  src.referenceRange as s -> tgt.referenceRange as t then ObservationReferenceRange(s, t);
  src.hasMember -> tgt.hasMember;
  src.derivedFrom -> tgt.derivedFrom;
  src.component as s -> tgt.component as t then ObservationComponent(s, t);
}

// group ObservationTriggeredBy(source src, target tgt) extends BackboneElement {
// src.observation -> tgt.observation;
// src.type as v -> tgt.type = translate(v, '#TriggeredByType', 'code');
// src.reason -> tgt.reason;
// }
group ObservationReferenceRange(source src, target tgt) extends BackboneElement {
  src.low -> tgt.low;
  src.high -> tgt.high;
  src.type -> tgt.type;
  src.appliesTo -> tgt.appliesTo;
  src.age -> tgt.age;
  src.text -> tgt.text;
}

group ObservationComponent(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.value : Quantity -> tgt.value "valueQuantity";
  src.value : CodeableConcept -> tgt.value "valueCodeableConcept";
  src.value : string -> tgt.value "valueString";
  src.value : boolean -> tgt.value "valueBoolean";
  src.value : integer -> tgt.value "valueInteger";
  src.value : Range -> tgt.value "valueRange";
  src.value : Ratio -> tgt.value "valueRatio";
  src.value : SampledData -> tgt.value "valueSampledData";
  src.value : time -> tgt.value "valueTime";
  src.value : dateTime -> tgt.value "valueDateTime";
  src.value : Period -> tgt.value "valuePeriod";
  src.dataAbsentReason -> tgt.dataAbsentReason;
  src.interpretation -> tgt.interpretation;
}

