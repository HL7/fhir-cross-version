/// url = "http://hl7.org/fhir/StructureMap/Coverage4to5"
/// name = "Coverage4to5"
/// title = "Coverage Transforms: R4 to R5"
/// status = "active"

uses "http://hl7.org/fhir/4.0/Coverage" alias CoverageR4 as source
uses "http://hl7.org/fhir/5.0/Coverage" alias CoverageR5 as target

imports "http://hl7.org/fhir/StructureMap/*4to5"

group Coverage(source src : CoverageR4, target tgt : CoverageR5) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier;
  src.status as v -> tgt.status = translate(v, 'http://hl7.org/fhir/ConceptMap/Coverage.status-R4toR5', 'code');
  src.type -> tgt.type;
  src.policyHolder -> tgt.policyHolder;
  src.subscriber -> tgt.subscriber;
  src.subscriberId as s ->  tgt.subscriberId as t,  t.value = s;
  src.beneficiary -> tgt.beneficiary;
  src.dependent -> tgt.dependent;
  src.relationship -> tgt.relationship;
  src.period -> tgt.period;
  src.class as s -> tgt.class as t then CoverageClass(s, t);
  src.order -> tgt.order;
  src.network -> tgt.network;
  src.costToBeneficiary as s -> tgt.costToBeneficiary as t then CoverageCostToBeneficiary(s, t);
  src.subrogation -> tgt.subrogation;
  src.contract -> tgt.contract;
}

// group CoveragePaymentBy(source src, target tgt) extends BackboneElement {
// src.party -> tgt.party;
// src.responsibility -> tgt.responsibility;
// }
group CoverageClass(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type;
  src.value as s ->  tgt.value as t,  t.value = s "classValue";
  src.name -> tgt.name;
}

group CoverageCostToBeneficiary(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type;
  src.value : Quantity -> tgt.value "valueQuantity";
  src.value : Money -> tgt.value "valueMoney";
  src.exception as s -> tgt.exception as t then CoverageCostToBeneficiaryException(s, t);
}

group CoverageCostToBeneficiaryException(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type;
  src.period -> tgt.period;
}

