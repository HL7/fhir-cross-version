/// url = "http://hl7.org/fhir/uv/xver/StructureMap/SubstancePolymer4to5"
/// name = "SubstancePolymer4to5"
/// title = "SubstancePolymer Transforms: R4 to R5"
/// status = "active"

uses "http://hl7.org/fhir/4.0/StructureDefinition/SubstancePolymer" alias SubstancePolymerR4 as source
uses "http://hl7.org/fhir/5.0/StructureDefinition/SubstancePolymer" alias SubstancePolymerR5 as target

imports "http://hl7.org/fhir/uv/xver/StructureMap/*4to5"

group SubstancePolymer(source src : SubstancePolymerR4, target tgt : SubstancePolymerR5) extends DomainResource <<type+>> {
  src.class -> tgt.class;
  src.geometry -> tgt.geometry;
  src.copolymerConnectivity -> tgt.copolymerConnectivity;
  src.modification -> tgt.modification;
  src.monomerSet as s -> tgt.monomerSet as t then SubstancePolymerMonomerSet(s, t);
  src.repeat as s -> tgt.repeat as t then SubstancePolymerRepeat(s, t);
}

group SubstancePolymerMonomerSet(source src, target tgt) extends BackboneElement {
  src.ratioType -> tgt.ratioType;
  src.startingMaterial as s -> tgt.startingMaterial as t then SubstancePolymerMonomerSetStartingMaterial(s, t);
}

group SubstancePolymerMonomerSetStartingMaterial(source src, target tgt) extends BackboneElement {
  src.material -> tgt.code;
  src.type -> tgt.category;
  src.isDefining -> tgt.isDefining;
  src.amount as sa, sa.amount : Quantity as s -> tgt.amount = s "CopyQuantity";
}

group SubstancePolymerRepeat(source src, target tgt) extends BackboneElement {
  src.averageMolecularFormula -> tgt.averageMolecularFormula;
  src.repeatUnitAmountType -> tgt.repeatUnitAmountType;
  src.repeatUnit as s -> tgt.repeatUnit as t then SubstancePolymerRepeatRepeatUnit(s, t);
}

group SubstancePolymerRepeatRepeatUnit(source src, target tgt) extends BackboneElement {
  src.repeatUnit -> tgt.unit;
  src.orientationOfPolymerisation -> tgt.orientation;
  src.degreeOfPolymerisation as s -> tgt.degreeOfPolymerisation as t then SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(s, t);
  src.structuralRepresentation as s -> tgt.structuralRepresentation as t then SubstancePolymerRepeatRepeatUnitStructuralRepresentation(s, t);
}

group SubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(source src, target tgt) extends BackboneElement {
  src.degree -> tgt.type;
  src.amount as s -> tgt then {
    s.amount : Quantity as v -> tgt.average = (v.value.round(0).toString().toInteger()) "amountQuantity";
    s.referenceRange as sr -> tgt then {
      sr.lowLimit as vl -> tgt.low = (vl.value.round(0).toString().toInteger()) "low";
      sr.highLimit as vh -> tgt.high = (vh.value.round(0).toString().toInteger()) "high";
    };
  };
}

group SubstancePolymerRepeatRepeatUnitStructuralRepresentation(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type;
  src.representation -> tgt.representation;
  src.attachment -> tgt.attachment;
}

