/// url = "http://hl7.org/fhir/uv/xver/StructureMap/ChargeItem4Bto5"
/// name = "ChargeItem4Bto5"
/// title = "ChargeItem Transforms: R4B to R5"
/// status = "active"

uses "http://hl7.org/fhir/4.3/ChargeItem" alias ChargeItemR4B as source
uses "http://hl7.org/fhir/5.0/ChargeItem" alias ChargeItemR5 as target

imports "http://hl7.org/fhir/uv/xver/StructureMap/*4Bto5"

group ChargeItem(source src : ChargeItemR4B, target tgt : ChargeItemR5) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier;
  src.definitionUri -> tgt.definitionUri;
  src.definitionCanonical -> tgt.definitionCanonical;
  src.status as v -> tgt.status = translate(v, 'http://hl7.org/fhir/uv/xver/ConceptMap/ChargeItem.status-4bto5', 'code');
  src.partOf -> tgt.partOf;
  src.code -> tgt.code;
  src.subject -> tgt.subject;
  src.context -> tgt.encounter;
  src.occurrence : dateTime -> tgt.occurrence "occurrenceDateTime";
  src.occurrence : Period -> tgt.occurrence "occurrencePeriod";
  src.occurrence : Timing -> tgt.occurrence "occurrenceTiming";
  src.performer as s -> tgt.performer as t then ChargeItemPerformer(s, t);
  src.performingOrganization -> tgt.performingOrganization;
  src.requestingOrganization -> tgt.requestingOrganization;
  src.costCenter -> tgt.costCenter;
  src.quantity -> tgt.quantity;
  src.bodysite -> tgt.bodysite;
  src.priceOverride : Money as s ->  tgt.totalPriceComponent = create('MonetaryComponent') as t,  t.type = 'base',  t.amount = s "priceOverrideMoney";
  src.overrideReason -> tgt.overrideReason;
  src.enterer -> tgt.enterer;
  src.enteredDate -> tgt.enteredDate;
  src.reason -> tgt.reason;
  src.service -> tgt.service;
  src.product : Reference -> tgt.product "productReference";
  src.product : CodeableConcept -> tgt.product "productCodeableConcept";
  src.account -> tgt.account;
  src.note -> tgt.note;
  src.supportingInformation -> tgt.supportingInformation;
}

// group ChargeItemTotalPriceOverride(source src, target tgt) extends BackboneElement {
// src.value as v -> tgt.type = "base";
// src.value as v -> tgt.amount = v "money";
// }
group ChargeItemPerformer(source src, target tgt) extends BackboneElement {
  src.function -> tgt.function;
  src.actor -> tgt.actor;
}

