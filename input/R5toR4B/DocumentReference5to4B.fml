/// url = "http://hl7.org/fhir/uv/xver/StructureMap/DocumentReference5to4b"
/// name = "DocumentReference5to4b"
/// title = "DocumentReference Transforms: R5 to R4B"
/// status = "active"

uses "http://hl7.org/fhir/5.0/DocumentReference" alias DocumentReferenceR5 as source
uses "http://hl7.org/fhir/4.3/DocumentReference" alias DocumentReferenceR4B as target

imports "http://hl7.org/fhir/uv/xver/StructureMap/*5to4b"

group DocumentReference(source src : DocumentReferenceR5, target tgt : DocumentReferenceR4B) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier;
  src.status as v -> tgt.status = translate(v, 'http://hl7.org/fhir/uv/xver/ConceptMap/dcr.status-5to4b', 'code');
  src.docStatus as v -> tgt.docStatus = translate(v, 'http://hl7.org/fhir/uv/xver/ConceptMap/dcr.docStatus-5to4b', 'code');
  src.type -> tgt.type;
  src.category -> tgt.category;
  src.subject -> tgt.subject;
  src.context : Reference as s ->  tgt.context as t,  t.encounter = s "contextReference";
  src.event as s ->  tgt.context as t,  t.event = s;
  src.facilityType as s ->  tgt.context as t,  t.facilityType = s;
  src.practiceSetting as s ->  tgt.context as t,  t.practiceSetting = s;
  src.period as s ->  tgt.context as t,  t.period = s;
  src.date -> tgt.date;
  src.author -> tgt.author;
  src.attester as s where src.attester.mode = 'professional' -> tgt then {
    s.party -> tgt.authenticator;
  };
  src.custodian -> tgt.custodian;
  src.relatesTo as s -> tgt.relatesTo as t then DocumentReferenceRelatesTo(s, t);
  src.description -> tgt.description;
  src.securityLabel -> tgt.securityLabel;
  src.content as s -> tgt.content as t then DocumentReferenceContent(s, t);
}

group DocumentReferenceRelatesTo(source src, target tgt) extends BackboneElement {
  src.code as s -> tgt then {
    s.coding as sc -> tgt.code = sc;
  };
  src.target -> tgt.target;
}

group DocumentReferenceContent(source src, target tgt) extends BackboneElement {
  src.attachment -> tgt.attachment;
  src.profile as s -> tgt then {
    s.value : Coding -> tgt.format "valueCoding";
  };
}

