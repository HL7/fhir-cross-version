/// url = "http://hl7.org/fhir/StructureMap/AdministrableProductDefinition4Bto5"
/// name = "AdministrableProductDefinition4Bto5"
/// title = "AdministrableProductDefinition Transforms: R4B to R5"
/// status = "active"

uses "http://hl7.org/fhir/4.3/AdministrableProductDefinition" alias AdministrableProductDefinitionR4B as source
uses "http://hl7.org/fhir/5.0/AdministrableProductDefinition" alias AdministrableProductDefinitionR5 as target

imports "http://hl7.org/fhir/StructureMap/*4Bto5"

group AdministrableProductDefinition(source src : AdministrableProductDefinitionR4B, target tgt : AdministrableProductDefinitionR5) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier;
  src.status as v -> tgt.status = translate(v, 'http://hl7.org/fhir/ConceptMap/AdministrableProductDefinitionB.status-R4BtoR5', 'code');
  src.formOf -> tgt.formOf;
  src.administrableDoseForm -> tgt.administrableDoseForm;
  src.unitOfPresentation -> tgt.unitOfPresentation;
  src.producedFrom -> tgt.producedFrom;
  src.ingredient -> tgt.ingredient;
  src.device -> tgt.device;
  src.property as s -> tgt.property as t then AdministrableProductDefinitionProperty(s, t);
  src.routeOfAdministration as s -> tgt.routeOfAdministration as t then AdministrableProductDefinitionRouteOfAdministration(s, t);
}

group AdministrableProductDefinitionProperty(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type;
  src.value : CodeableConcept -> tgt.value "valueCodeableConcept";
  src.value : Quantity -> tgt.value "valueQuantity";
  src.value : date -> tgt.value "valueDate";
  src.value : boolean -> tgt.value "valueBoolean";
  src.value : Attachment -> tgt.value "valueAttachment";
  src.status as v -> tgt.status = translate(v, 'http://hl7.org/fhir/ConceptMap/AdministrableProductDefinitionB.property.status-R4BtoR5', 'code');
}

group AdministrableProductDefinitionRouteOfAdministration(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.firstDose -> tgt.firstDose;
  src.maxSingleDose -> tgt.maxSingleDose;
  src.maxDosePerDay -> tgt.maxDosePerDay;
  src.maxDosePerTreatmentPeriod -> tgt.maxDosePerTreatmentPeriod;
  src.maxTreatmentPeriod -> tgt.maxTreatmentPeriod;
  src.targetSpecies as s -> tgt.targetSpecies as t then AdministrableProductDefinitionRouteOfAdministrationTargetSpecies(s, t);
}

group AdministrableProductDefinitionRouteOfAdministrationTargetSpecies(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.withdrawalPeriod as s -> tgt.withdrawalPeriod as t then RouteOfAdministrationTargetSpeciesWithdrawalPeriod(s, t);
}

group RouteOfAdministrationTargetSpeciesWithdrawalPeriod(source src, target tgt) extends BackboneElement {
  src.tissue -> tgt.tissue;
  src.value -> tgt.value;
  src.supportingInformation -> tgt.supportingInformation;
}

