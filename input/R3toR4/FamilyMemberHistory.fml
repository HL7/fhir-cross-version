/// url = "http://hl7.org/fhir/uv/xver/StructureMap/FamilyMemberHistory3to4"
/// name = "FamilyMemberHistory3to4"
/// title = "FamilyMemberHistory Transforms: R3 to R4"
/// status = "active"

uses "http://hl7.org/fhir/3.0/FamilyMemberHistory" alias FamilyMemberHistoryR3 as source
uses "http://hl7.org/fhir/4.0/FamilyMemberHistory" alias FamilyMemberHistory as target

imports "http://hl7.org/fhir/uv/xver/StructureMap/*3to4"

group FamilyMemberHistory(source src : FamilyMemberHistoryR3, target tgt : FamilyMemberHistory) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier;
  src.definition -> tgt.instantiatesCanonical;
  src.status -> tgt.status;
  src.notDone as v ->  tgt.extension as vt,  vt.url = 'http://hl7.org/fhir/3.0/StructureDefinition/extension-FamilyMemberHistory.notDone',  vt.value = v;
  src.notDoneReason -> tgt.dataAbsentReason;
  src.patient -> tgt.patient;
  src.date -> tgt.date;
  src.name -> tgt.name;
  src.relationship -> tgt.relationship;
  src.gender as v ->  tgt.sex as cc,  cc.coding as c,  c.system = 'http://hl7.org/fhir/administrative-gender',  c.code = v;
  src.born : Period as vs -> tgt.born = create('Period') as vt then Period(vs, vt) "bornPeriod";
  src.born : date as vs -> tgt.born = create('date') as vt then Date(vs, vt) "bornDate";
  src.born : string as vs -> tgt.born = create('string') as vt then string(vs, vt) "bornString";
  src.age : Age as vs -> tgt.age = create('Age') as vt then Age(vs, vt) "ageAge";
  src.age : Range as vs -> tgt.age = create('Range') as vt then Range(vs, vt) "ageRange";
  src.age : string as vs -> tgt.age = create('string') as vt then string(vs, vt) "ageString";
  src.estimatedAge -> tgt.estimatedAge;
  src.deceased : boolean as vs -> tgt.deceased = create('boolean') as vt then boolean(vs, vt) "deceasedBoolean";
  src.deceased : Age as vs -> tgt.deceased = create('Age') as vt then Age(vs, vt) "deceasedAge";
  src.deceased : Range as vs -> tgt.deceased = create('Range') as vt then Range(vs, vt) "deceasedRange";
  src.deceased : date as vs -> tgt.deceased = create('date') as vt then Date(vs, vt) "deceasedDate";
  src.deceased : string as vs -> tgt.deceased = create('string') as vt then string(vs, vt) "deceasedString";
  src.reasonCode -> tgt.reasonCode;
  src.reasonReference -> tgt.reasonReference;
  src.note -> tgt.note;
  src.condition as s -> tgt.condition as t then condition(s, t);
}

group condition(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.outcome -> tgt.outcome;
  src.onset : string as vs -> tgt.onset = create('string') as vt then string(vs, vt) "onsetString";
  src.onset : Age as vs -> tgt.onset = create('Age') as vt then Age(vs, vt) "onsetAge";
  src.onset : Range as vs -> tgt.onset = create('Range') as vt then Range(vs, vt) "onsetRange";
  src.onset : Period as vs -> tgt.onset = create('Period') as vt then Period(vs, vt) "onsetPeriod";
  src.note -> tgt.note;
}

