/// url = "http://hl7.org/fhir/uv/xver/StructureMap/PackagedProductDefinition5to4b"
/// name = "PackagedProductDefinition5to4b"
/// title = "PackagedProductDefinition Transforms: R5 to R4B"
/// status = "active"

uses "http://hl7.org/fhir/5.0/StructureDefinition/PackagedProductDefinition" alias PackagedProductDefinitionR5 as source
uses "http://hl7.org/fhir/4.3/StructureDefinition/PackagedProductDefinition" alias PackagedProductDefinitionR4B as target

imports "http://hl7.org/fhir/uv/xver/StructureMap/*5to4b"

group PackagedProductDefinition(source src : PackagedProductDefinitionR5, target tgt : PackagedProductDefinitionR4B) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier;
  src.name -> tgt.name;
  src.type -> tgt.type;
  src.packageFor -> tgt.packageFor;
  src.status -> tgt.status;
  src.statusDate -> tgt.statusDate;
  src.containedItemQuantity -> tgt.containedItemQuantity;
  src.description -> tgt.description;
  src.legalStatusOfSupply as s -> tgt.legalStatusOfSupply as t then PackagedProductDefinitionLegalStatusOfSupply(s, t);
  src.marketingStatus -> tgt.marketingStatus;

  src.characteristic as s then {
    s.value : CodeableConcept -> tgt.characteristic;
  } "SetCharacteristicValue";
  src.copackagedIndicator -> tgt.copackagedIndicator;
  src.manufacturer -> tgt.manufacturer;
  src.packaging as s -> tgt.package as t then PackagedProductDefinitionPackaging(s, t);
}

group PackagedProductDefinitionLegalStatusOfSupply(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
  src.jurisdiction -> tgt.jurisdiction;
}

group PackagedProductDefinitionPackaging(source src, target tgt) extends BackboneElement {
  src.identifier -> tgt.identifier;
  src.type -> tgt.type;
  src.quantity -> tgt.quantity;
  src.material -> tgt.material;
  src.alternateMaterial -> tgt.alternateMaterial;
  src.shelfLifeStorage as s -> tgt.shelfLifeStorage as t then {
    s.type -> t.type;
    s.period : Duration -> t.period "periodDuration";
    s.period : string -> t.period "periodString";
    s.specialPrecautionsForStorage -> t.specialPrecautionsForStorage;
  };
  src.manufacturer -> tgt.manufacturer;
  src.property as s -> tgt.property as t then PackagedProductDefinitionPackagingProperty(s, t);
  src.containedItem as s -> tgt.containedItem as t then PackagedProductDefinitionPackagingContainedItem(s, t);
}

group PackagedProductDefinitionPackagingProperty(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type;
  src.value : CodeableConcept -> tgt.value "valueCodeableConcept";
  src.value : Quantity -> tgt.value "valueQuantity";
  src.value : date -> tgt.value "valueDate";
  src.value : boolean -> tgt.value "valueBoolean";
  src.value : Attachment -> tgt.value "valueAttachment";
}

group PackagedProductDefinitionPackagingContainedItem(source src, target tgt) extends BackboneElement {
  src.item -> tgt.item;
  src.amount -> tgt.amount;
}

