/// url = "http://hl7.org/fhir/StructureMap/Primitives5to4"
/// name = "Primitives5to4"
/// title = "Primitive Transforms: R5 to R4"
/// status = "draft"

uses "http://hl7.org/fhir/5.0/base64Binary" alias base64BinaryR5 as source
uses "http://hl7.org/fhir/4.0/base64Binary" alias base64BinaryR4 as target
uses "http://hl7.org/fhir/5.0/boolean" alias booleanR5 as source
uses "http://hl7.org/fhir/4.0/boolean" alias booleanR4 as target
uses "http://hl7.org/fhir/5.0/canonical" alias canonicalR5 as source
uses "http://hl7.org/fhir/4.0/canonical" alias canonicalR4 as target
uses "http://hl7.org/fhir/5.0/code" alias codeR5 as source
uses "http://hl7.org/fhir/4.0/code" alias codeR4 as target
uses "http://hl7.org/fhir/5.0/date" alias dateR5 as source
uses "http://hl7.org/fhir/4.0/date" alias dateR4 as target
uses "http://hl7.org/fhir/5.0/dateTime" alias dateTimeR5 as source
uses "http://hl7.org/fhir/4.0/dateTime" alias dateTimeR4 as target
uses "http://hl7.org/fhir/5.0/decimal" alias decimalR5 as source
uses "http://hl7.org/fhir/4.0/decimal" alias decimalR4 as target
uses "http://hl7.org/fhir/5.0/id" alias idR5 as source
uses "http://hl7.org/fhir/4.0/id" alias idR4 as target
uses "http://hl7.org/fhir/5.0/instant" alias instantR5 as source
uses "http://hl7.org/fhir/4.0/instant" alias instantR4 as target
uses "http://hl7.org/fhir/5.0/integer" alias integerR5 as source
uses "http://hl7.org/fhir/4.0/integer" alias integerR4 as target
uses "http://hl7.org/fhir/5.0/integer64" alias integer64R5 as source
uses "http://hl7.org/fhir/5.0/markdown" alias markdownR5 as source
uses "http://hl7.org/fhir/4.0/markdown" alias markdownR4 as target
uses "http://hl7.org/fhir/5.0/oid" alias oidR5 as source
uses "http://hl7.org/fhir/4.0/oid" alias oidR4 as target
uses "http://hl7.org/fhir/5.0/positiveInt" alias positiveIntR5 as source
uses "http://hl7.org/fhir/4.0/positiveInt" alias positiveIntR4 as target
uses "http://hl7.org/fhir/5.0/string" alias stringR5 as source
uses "http://hl7.org/fhir/4.0/string" alias stringR4 as target
uses "http://hl7.org/fhir/5.0/time" alias timeR5 as source
uses "http://hl7.org/fhir/4.0/time" alias timeR4 as target
uses "http://hl7.org/fhir/5.0/unsignedInt" alias unsignedIntR5 as source
uses "http://hl7.org/fhir/4.0/unsignedInt" alias unsignedIntR4 as target
uses "http://hl7.org/fhir/5.0/uri" alias uriR5 as source
uses "http://hl7.org/fhir/4.0/uri" alias uriR4 as target
uses "http://hl7.org/fhir/5.0/url" alias urlR5 as source
uses "http://hl7.org/fhir/4.0/url" alias urlR4 as target
uses "http://hl7.org/fhir/5.0/uuid" alias uuidR5 as source
uses "http://hl7.org/fhir/4.0/uuid" alias uuidR4 as target
uses "http://hl7.org/fhir/5.0/xhtml" alias xhtmlR5 as source
uses "http://hl7.org/fhir/4.0/xhtml" alias xhtmlR4 as target

imports "http://hl7.org/fhir/StructureMap/Element5to4"

group base64Binary(source src : base64BinaryR5, target tgt : base64BinaryR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "base64BinaryValue";
}

group boolean(source src : booleanR5, target tgt : booleanR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "booleanValue";
}

group canonical(source src : canonicalR5, target tgt : canonicalR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "canonicalValue";
}

group canonical2uri(source src : canonicalR5, target tgt : uriR4) extends Element <<types>> {
  src.value as v -> tgt.value = v "canonical2uriValue";
}

group code(source src : codeR5, target tgt : codeR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "codeValue";
}

group code2id(source src : codeR5, target tgt : idR4) extends Element <<types>> {
  src.value as v -> tgt.value = v "code2idValue";
}

group code2string(source src : codeR5, target tgt : stringR4) extends Element <<types>> {
  src.value as v -> tgt.value = v "code2stringValue";
}

group code2uri(source src : codeR5, target tgt : uriR4) extends Element <<types>> {
  src.value as v -> tgt.value = v "code2uriValue";
}

group date(source src : dateR5, target tgt : dateR4) extends Element <<types>> {
  src.value as v -> tgt.value = v "dateValue";
}

group date2dateTime(source src : dateR5, target tgt : dateTimeR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "date2dateTimeValue";
}

group dateTime(source src : dateTimeR5, target tgt : dateTimeR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "dateTimeValue";
}

group dateTime2date(source src : dateTimeR5, target tgt : dateR4) extends Element <<types>> {
  src.value as v -> tgt.value = v "dateTime2dateValue";
}

group decimal(source src : decimalR5, target tgt : decimalR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "decimalValue";
}

group id(source src : idR5, target tgt : idR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "idValue";
}

group id2code(source src : idR5, target tgt : codeR4) extends Element <<types>> {
  src.value as v -> tgt.value = v "id2codeValue";
}

group id2string(source src : idR5, target tgt : stringR4) extends Element <<types>> {
  src.value as v -> tgt.value = v "id2stringValue";
}

group instant(source src : instantR5, target tgt : instantR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "instantValue";
}

group integer(source src : integerR5, target tgt : integerR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "integerValue";
}

group integer64(source src : integer64R5, target tgt : integerR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "integer64Value";
}

group markdown(source src : markdownR5, target tgt : markdownR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "markdownValue";
}

group markdown2string(source src : markdownR5, target tgt : stringR4) extends Element <<types>> {
  src.value as v -> tgt.value = v "markdown2stringValue";
}

group oid(source src : oidR5, target tgt : oidR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "oidValue";
}

group positiveInt(source src : positiveIntR5, target tgt : positiveIntR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "positiveIntValue";
}

group string(source src : stringR5, target tgt : stringR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "stringValue";
}

group string2markdown(source src : stringR5, target tgt : markdownR4) extends Element <<types>> {
  src.value as v -> tgt.value = v "string2markdownValue";
}

group string2id(source src : stringR5, target tgt : idR4) extends Element <<types>> {
  src.value as v -> tgt.value = v "string2idValue";
}

group string2code(source src : stringR5, target tgt : codeR4) extends Element <<types>> {
  src.value as v -> tgt.value = v "string2codeValue";
}

group time(source src : timeR5, target tgt : timeR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "timeValue";
}

group unsignedInt(source src : unsignedIntR5, target tgt : unsignedIntR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "unsignedIntValue";
}

group integer64(source src : integer64R5, target tgt : unsignedIntR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "integer64Value";
}

group integer642string(source src : integer64R5, target tgt : stringR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "integer642stringValue";
}

group uri(source src : uriR5, target tgt : uriR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "uriValue";
}

group uri2canonical(source src : uriR5, target tgt : canonicalR4) extends Element <<types>> {
  src.value as v -> tgt.value = v "uri2canonicalValue";
}

group uri2code(source src : uriR5, target tgt : codeR4) extends Element <<types>> {
  src.value as v -> tgt.value = v "uri2codeValue";
}

group url(source src : urlR5, target tgt : urlR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "urlValue";
}

group uuid(source src : uuidR5, target tgt : uuidR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "uuidValue";
}

group xhtml(source src : xhtmlR5, target tgt : xhtmlR4) extends Element <<type+>> {
  src.value as v -> tgt.value = v "xhtmlValue";
}

