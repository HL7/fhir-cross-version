/// url = "http://hl7.org/fhir/uv/xver/StructureMap/ElementDefinition3to2"
/// name = "ElementDefinition3to2"
/// title = "ElementDefinition Transforms: R3 to R2"
/// status = "active"

uses "http://hl7.org/fhir/3.0/StructureDefinition/StructureDefinition" alias StructureDefinition as source
uses "http://hl7.org/fhir/3.0/StructureDefinition/ElementDefinition" alias ElementDefinition as source
uses "http://hl7.org/fhir/1.0/StructureDefinition/ElementDefinition" alias ElementDefinitionR2 as target

imports "http://hl7.org/fhir/uv/xver/StructureMap/*3to2"

group ElementDefinition(source srcR : StructureDefinition, source src : ElementDefinition, target tgt : ElementDefinitionR2) {
  src.extension -> tgt.extension "ElementDefinitionExtensions";
  src.path -> tgt.path "ElementDefinitionPath";
  src.sliceName -> tgt.name "ElementDefinitionName";
  src.representation where ($this = 'xmlAttr') -> tgt.representation "ElementDefinitionRepresentation";
  src.label -> tgt.label "ElementDefinitionLabel";
  src.code -> tgt.code "ElementDefinitionCode";
  src.slicing as vs0 -> tgt.slicing as vt0 then {
    vs0.discriminator as vd1 then edDiscriminator(vd1, vt0) "slicing-discriminator";
    vs0.description -> vt0.description "slicing-description";
    vs0.ordered -> vt0.ordered "slicing-ordered";
    vs0.rules -> vt0.rules "slicing-rules";
  } "ElementDefinitionSlicing";
  src.short -> tgt.short "ElementDefinitionShort";
  src.definition -> tgt.definition "ElementDefinitionDefinition";
  src.comment -> tgt.comments "ElementDefinitionComments";
  src.requirements -> tgt.requirements "ElementDefinitionRequirements";
  src.alias -> tgt.alias "ElementDefinitionAlias";
  src.min -> tgt.min "ElementDefinitionMin";
  src.max -> tgt.max "ElementDefinitionMax";
  src.base as vs0 -> tgt.base as vt0 then {
    vs0.path -> vt0.path "base-path";
    vs0.min -> vt0.min "base-min";
    vs0.max -> vt0.max "base-max";
  } "ElementDefinitionBase";
  src.type as vs0 -> tgt.type as vt0 then type(vs0, vt0) "ElementDefinitionType";
  src where (path.contains('.').not() and src.type.empty() and src.contentReference.empty() and srcR.is(StructureDefinition)) -> tgt.type as vt0 then {
    srcR.baseDefinition as base -> vt0.code = (base.substring(40)) "type-code";
  } "ElementDefinitionType-1st";
  src.contentReference -> tgt.nameReference "ElementDefinitionContentReference";
  src.defaultValue -> tgt.defaultValue "ElementDefinitionDefaultValue";
  src.meaningWhenMissing -> tgt.meaningWhenMissing "ElementDefinitionMeaningWhenMissing";
  src.example first as exv then {
    exv.value -> tgt.example "ElementDefinitionExampleV";
  } "ElementDefinition-example";
  src.fixed -> tgt.fixed "ElementDefinitionFixed";
  src.pattern -> tgt.pattern "ElementDefinitionPattern";
  src.minValue -> tgt.minValue "ElementDefinitionMinValue";
  src.maxValue -> tgt.maxValue "ElementDefinitionMaxValue";
  src.maxLength -> tgt.maxLength "ElementDefinitionMaxLength";
  src.condition -> tgt.condition "ElementDefinitionCondition";
  src.constraint as vs0 -> tgt.constraint as vt0 then constraint(vs0, vt0) "ElementDefinitionConstraint";
  src.mustSupport -> tgt.mustSupport "ElementDefinitionMustSupport";
  src.isModifier -> tgt.isModifier "ElementDefinitionIsModifier";
  src.isSummary -> tgt.isSummary "ElementDefinitionIsSummary";
  src.binding as vs0 -> tgt.binding as vt0 then ElementDefinitionBinding(vs0, vt0) "ElementDefinitionBinding";
  src.mapping as vs0 -> tgt.mapping as vt0 then mapping(vs0, vt0) "ElementDefinitionMapping";
}

group edDiscriminator(source src, target tgt) extends Element {
  src.path where (type = 'value') -> tgt.discriminator "binding-strength";
}

group ElementDefinitionBinding(source src, target tgt) extends Element {
  src.strength -> tgt.strength "binding-strength";
  src.description -> tgt.description "binding-description";
  src.valueSet -> tgt.valueSet "binding-valueSet";
}

group type(source src, target tgt) extends Element {
  src.code -> tgt.code "type-code";
  src.profile where (src.targetProfile.empty()) -> tgt.profile "type-profile1";
  src.targetProfile -> tgt.profile "type-profile2";
  src.aggregation -> tgt.aggregation "type-aggregation";
}

group constraint(source src, target tgt) extends Element {
  src.key -> tgt.key "constraint-key";
  src.requirements -> tgt.requirements "constraint-requirements";
  src.severity -> tgt.severity "constraint-severity";
  src.human -> tgt.human "constraint-human";
  src.xpath -> tgt.xpath "constraint-xpath";
}

group mapping(source src, target tgt) extends Element {
  src.identity -> tgt.identity "mapping-identity";
  src.language -> tgt.language "mapping-language";
  src.map -> tgt.map "mapping-map";
}

