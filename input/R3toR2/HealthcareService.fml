/// url = "http://hl7.org/fhir/uv/xver/StructureMap/HealthcareService3to2"
/// name = "HealthcareService3to2"
/// title = "HealthcareService Transforms: R3 to R2"
/// status = "active"

uses "http://hl7.org/fhir/3.0/StructureDefinition/HealthcareService" alias HealthcareService as source
uses "http://hl7.org/fhir/1.0/StructureDefinition/HealthcareService" alias HealthcareServiceR2 as target

imports "http://hl7.org/fhir/uv/xver/StructureMap/*3to2"

group HealthcareService(source src : HealthcareService, target tgt : HealthcareServiceR2) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier "HealthcareServiceIdentifier";
  src.providedBy -> tgt.providedBy "HealthcareServiceProvidedBy";
  src.category -> tgt.serviceCategory "HealthcareServiceServiceCategory";
  src.type as vs ->  tgt.serviceType as vt,  vt.type as v then CodeableConcept(vs, v) "HealthcareServiceServiceType";
  src.specialty as vs ->  tgt.serviceType as vt first,  vt.specialty as v then CodeableConcept(vs, v) "HealthcareServiceSpeciality";
  src.location -> tgt.location "HealthcareServiceLocation";
  src.name -> tgt.serviceName "HealthcareServiceServiceName";
  src.comment -> tgt.comment "HealthcareServiceComment";
  src.extraDetails -> tgt.extraDetails "HealthcareServiceExtraDetails";
  src.photo -> tgt.photo "HealthcareServicePhoto";
  src.telecom -> tgt.telecom "HealthcareServiceTelecom";
  src.coverageArea -> tgt.coverageArea "HealthcareServiceCoverageArea";
  src.serviceProvisionCode -> tgt.serviceProvisionCode "HealthcareServiceServiceProvisionCode";
  src.eligibility -> tgt.eligibility "HealthcareServiceEligibility";
  src.eligibilityNote -> tgt.eligibilityNote "HealthcareServiceEligibilityNote";
  src.programName -> tgt.programName "HealthcareServiceProgramName";
  src.characteristic -> tgt.characteristic "HealthcareServiceCharacteristic";
  src.referralMethod -> tgt.referralMethod "HealthcareServiceReferralMethod";
  src.appointmentRequired -> tgt.appointmentRequired "HealthcareServiceAppointmentRequired";
  src.availableTime as vs0 -> tgt.availableTime as vt0 then hsvcAvailable(vs0, vt0) "HealthcareServiceAvailableTime";
  src.notAvailable as vs0 -> tgt.notAvailable as vt0 then hsvcNotAvailable(vs0, vt0) "HealthcareServiceNotAvailable";
  src.availabilityExceptions -> tgt.availabilityExceptions "HealthcareServiceAvailabilityExceptions";
}

group hsvcAvailable(source src, target tgt) extends BackboneElement {
  src.daysOfWeek -> tgt.daysOfWeek "availableTimeDaysOfWeek";
  src.allDay -> tgt.allDay "availableTimeAllDay";
  src.availableStartTime -> tgt.availableStartTime "availableTimeAvailableStartTime";
  src.availableEndTime -> tgt.availableEndTime "availableTimeAvailableEndTime";
}

group hsvcNotAvailable(source src, target tgt) extends BackboneElement {
  src.description -> tgt.description "notAvailableDescription";
  src.during -> tgt.during "notAvailableDuring";
}

