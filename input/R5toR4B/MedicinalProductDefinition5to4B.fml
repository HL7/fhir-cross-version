/// url = "http://hl7.org/fhir/uv/xver/StructureMap/MedicinalProductDefinition5to4b"
/// name = "MedicinalProductDefinition5to4b"
/// title = "MedicinalProductDefinition Transforms: R5 to R4B"
/// status = "active"

uses "http://hl7.org/fhir/5.0/StructureDefinition/MedicinalProductDefinition" alias MedicinalProductDefinitionR5 as source
uses "http://hl7.org/fhir/4.3/StructureDefinition/MedicinalProductDefinition" alias MedicinalProductDefinitionR4B as target

imports "http://hl7.org/fhir/uv/xver/StructureMap/*5to4b"

group MedicinalProductDefinition(source src : MedicinalProductDefinitionR5, target tgt : MedicinalProductDefinitionR4B) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier;
  src.type -> tgt.type;
  src.domain -> tgt.domain;
  src.version -> tgt.version;
  src.status -> tgt.status;
  src.statusDate -> tgt.statusDate;
  src.description -> tgt.description;
  src.combinedPharmaceuticalDoseForm -> tgt.combinedPharmaceuticalDoseForm;
  src.route -> tgt.route;
  src.indication -> tgt.indication;
  src.legalStatusOfSupply -> tgt.legalStatusOfSupply;
  src.additionalMonitoringIndicator -> tgt.additionalMonitoringIndicator;
  src.specialMeasures -> tgt.specialMeasures;
  src.pediatricUseIndicator -> tgt.pediatricUseIndicator;
  src.classification -> tgt.classification;
  src.marketingStatus -> tgt.marketingStatus;
  src.packagedMedicinalProduct -> tgt.packagedMedicinalProduct;
  src.ingredient -> tgt.ingredient;
  src.impurity -> tgt.impurity;
  src.attachedDocument -> tgt.attachedDocument;
  src.masterFile -> tgt.masterFile;
  src.contact as s -> tgt.contact as t then MedicinalProductDefinitionContact(s, t);
  src.clinicalTrial -> tgt.clinicalTrial;
  src.code -> tgt.code;
  src.name as s -> tgt.name as t then MedicinalProductDefinitionName(s, t);
  src.crossReference as s -> tgt.crossReference as t then MedicinalProductDefinitionCrossReference(s, t);
  src.operation as s -> tgt.operation as t then MedicinalProductDefinitionOperation(s, t);
  src.characteristic as s -> tgt.characteristic as t then MedicinalProductDefinitionCharacteristic(s, t);
}

group MedicinalProductDefinitionContact(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type;
  src.contact -> tgt.contact;
}

group MedicinalProductDefinitionName(source src, target tgt) extends BackboneElement {
  src.productName -> tgt.productName;
  src.type -> tgt.type;
  src.part as s -> tgt.namePart as t then MedicinalProductDefinitionNamePart(s, t);
  src.usage as s -> tgt.countryLanguage as t then MedicinalProductDefinitionNameUsage(s, t);
}

group MedicinalProductDefinitionNamePart(source src, target tgt) extends BackboneElement {
  src.part -> tgt.part;
  src.type -> tgt.type;
}

group MedicinalProductDefinitionNameUsage(source src, target tgt) extends BackboneElement {
  src.country -> tgt.country;
  src.jurisdiction -> tgt.jurisdiction;
  src.language -> tgt.language;
}

group MedicinalProductDefinitionCrossReference(source src, target tgt) extends BackboneElement {
  src.product -> tgt.product;
  src.type -> tgt.type;
}

group MedicinalProductDefinitionOperation(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type;
  src.effectiveDate -> tgt.effectiveDate;
  src.organization -> tgt.organization;
  src.confidentialityIndicator -> tgt.confidentialityIndicator;
}

group MedicinalProductDefinitionCharacteristic(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type;
  src.value : CodeableConcept -> tgt.value "valueCodeableConcept";
  src.value : Quantity -> tgt.value "valueQuantity";
  src.value : date -> tgt.value "valueDate";
  src.value : boolean -> tgt.value "valueBoolean";
  src.value : Attachment -> tgt.value "valueAttachment";
}

