/// url = "http://hl7.org/fhir/StructureMap/CoverageEligibilityResponse5to4B"
/// name = "CoverageEligibilityResponse5to4B"
/// title = "CoverageEligibilityResponse Transforms: R5 to R4B"
/// status = "active"

uses "http://hl7.org/fhir/5.0/CoverageEligibilityResponse" alias CoverageEligibilityResponseR5 as source
uses "http://hl7.org/fhir/4.0/CoverageEligibilityResponse" alias CoverageEligibilityResponseR4B as target

imports "http://hl7.org/fhir/StructureMap/*5to4B"

group CoverageEligibilityResponse(source src : CoverageEligibilityResponseR5, target tgt : CoverageEligibilityResponseR4B) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier;
  src.status as v -> tgt.status = translate(v, 'http://hl7.org/fhir/ConceptMap/CoverageEligibilityResponse.status-R5toR4', 'code');
  src.purpose as v -> tgt.purpose = translate(v, 'http://hl7.org/fhir/ConceptMap/CoverageEligibilityResponse.purpose-R5toR4', 'code');
  src.patient -> tgt.patient;
  src.serviced : date -> tgt.serviced "servicedDate";
  src.serviced : Period -> tgt.serviced "servicedPeriod";
  src.created -> tgt.created;
  src.requestor -> tgt.requestor;
  src.request -> tgt.request;
  src.outcome as v -> tgt.outcome = translate(v, 'http://hl7.org/fhir/ConceptMap/CoverageEligibilityResponse.outcome-R5toR4', 'code');
  src.disposition -> tgt.disposition;
  src.insurer -> tgt.insurer;
  src.insurance as s -> tgt.insurance as t then CoverageEligibilityResponseInsurance(s, t);
  src.preAuthRef -> tgt.preAuthRef;
  src.form -> tgt.form;
  src.error as s -> tgt.error as t then CoverageEligibilityResponseError(s, t);
}

// group CoverageEligibilityResponseEvent(source src, target tgt) extends BackboneElement {
// src.type -> tgt.type;
// src.when : dateTime -> tgt.when;
// src.when : Period -> tgt.when;
// }
group CoverageEligibilityResponseInsurance(source src, target tgt) extends BackboneElement {
  src.coverage -> tgt.coverage;
  src.inforce -> tgt.inforce;
  src.benefitPeriod -> tgt.benefitPeriod;
  src.item as s -> tgt.item as t then CoverageEligibilityResponseInsuranceItem(s, t);
}

group CoverageEligibilityResponseInsuranceItem(source src, target tgt) extends BackboneElement {
  src.category -> tgt.category;
  src.productOrService -> tgt.productOrService;
  src.modifier -> tgt.modifier;
  src.provider -> tgt.provider;
  src.excluded -> tgt.excluded;
  src.name -> tgt.name;
  src.description -> tgt.description;
  src.network -> tgt.network;
  src.unit -> tgt.unit;
  src.term -> tgt.term;
  src.benefit as s -> tgt.benefit as t then CoverageEligibilityResponseInsuranceItemBenefit(s, t);
  src.authorizationRequired -> tgt.authorizationRequired;
  src.authorizationSupporting -> tgt.authorizationSupporting;
  src.authorizationUrl -> tgt.authorizationUrl;
}

group CoverageEligibilityResponseInsuranceItemBenefit(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type;
  src.allowed : unsignedInt -> tgt.allowed "allowedUnsignedInt";
  src.allowed : string -> tgt.allowed "allowedString";
  src.allowed : Money -> tgt.allowed "allowedMoney";
  src.used : unsignedInt -> tgt.used "usedUnsignedInt";
  src.used : string -> tgt.used "usedString";
  src.used : Money -> tgt.used "usedMoney";
}

group CoverageEligibilityResponseError(source src, target tgt) extends BackboneElement {
  src.code -> tgt.code;
}

