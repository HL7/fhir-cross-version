/// url = "http://hl7.org/fhir/uv/xver/StructureMap/AuditEvent4Bto5"
/// name = "AuditEvent4Bto5"
/// title = "AuditEvent Transforms: R4B to R5"
/// status = "active"

uses "http://hl7.org/fhir/4.3/AuditEvent" alias AuditEventR4B as source
uses "http://hl7.org/fhir/5.0/AuditEvent" alias AuditEventR5 as target

imports "http://hl7.org/fhir/uv/xver/StructureMap/*4Bto5"

group AuditEvent(source src : AuditEventR4B, target tgt : AuditEventR5) extends DomainResource <<type+>> {
  src.type -> tgt.category;
  src.subtype -> tgt.code;
  src.action as v -> tgt.action = translate(v, 'http://hl7.org/fhir/uv/xver/ConceptMap/AuditEvent.action-4bto5', 'code');
  src.recorded -> tgt.recorded;
  src.outcome as s where outcome = '0' ->  tgt.outcome as t,  t.code = create('Coding') as tc,  tc.system = 'http://hl7.org/fhir/issue-severity',  tc.code = 'success',  tc.display = 'Success';
  src.outcome as s where outcome = '4' ->  tgt.outcome as t,  t.code = create('Coding') as tc,  tc.system = 'http://hl7.org/fhir/issue-severity',  tc.code = 'warning',  tc.display = 'Warning';
  src.outcome as s where outcome = '8' ->  tgt.outcome as t,  t.code = create('Coding') as tc,  tc.system = 'http://hl7.org/fhir/issue-severity',  tc.code = 'error',  tc.display = 'error';
  src.outcome as s where outcome = '12' ->  tgt.outcome as t,  t.code = create('Coding') as tc,  tc.system = 'http://hl7.org/fhir/issue-severity',  tc.code = 'fatal',  tc.display = 'Fatal';
  src.agent as s -> tgt.agent as t then AuditEventAgent(s, t);
  src.source as s -> tgt.source as t then AuditEventSource(s, t);
  src.entity as s -> tgt.entity as t then AuditEventEntity(s, t);
}

// group AuditEventOutcome(source src, target tgt) extends BackboneElement {
// src.code -> tgt.code;
// src.detail -> tgt.detail;
// }
group AuditEventAgent(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type;
  src.role -> tgt.role;
  src.who -> tgt.who;
  src.requestor -> tgt.requestor;
  src.location -> tgt.location;
  src.policy -> tgt.policy;
  src.network as v -> tgt then {
    v.address -> tgt.network "network";
  };
  src.purposeOfUse -> tgt.authorization;
}

group AuditEventSource(source src, target tgt) extends BackboneElement {
  src.site as v ->  tgt.site = create('Reference') as t,  t.display = v;
  src.observer -> tgt.observer;
  src.type -> tgt.type;
}

group AuditEventEntity(source src, target tgt) extends BackboneElement {
  src.what -> tgt.what;
  src.role -> tgt.role;
  src.securityLabel -> tgt.securityLabel;
  src.query -> tgt.query;
  src.detail as s -> tgt.detail as t then AuditEventEntityDetail(s, t);
}

group AuditEventEntityDetail(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type;
  src.value : string -> tgt.value "valueString";
  src.value : base64Binary -> tgt.value "valueBase64Binary";
}

