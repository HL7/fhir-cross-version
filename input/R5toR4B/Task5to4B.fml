/// url = "http://hl7.org/fhir/uv/xver/StructureMap/Task5to4b"
/// name = "Task5to4b"
/// title = "Task Transforms: R5 to R4B"
/// status = "active"

uses "http://hl7.org/fhir/5.0/Task" alias TaskR5 as source
uses "http://hl7.org/fhir/4.3/Task" alias TaskR4B as target

imports "http://hl7.org/fhir/uv/xver/StructureMap/*5to4b"

group Task(source src : TaskR5, target tgt : TaskR4B) extends DomainResource <<type+>> {
  src.identifier -> tgt.identifier;
  src.instantiatesCanonical -> tgt.instantiatesCanonical;
  src.instantiatesUri -> tgt.instantiatesUri;
  src.basedOn -> tgt.basedOn;
  src.groupIdentifier -> tgt.groupIdentifier;
  src.partOf -> tgt.partOf;
  src.status as v -> tgt.status = translate(v, 'http://hl7.org/fhir/uv/xver/ConceptMap/Task.status-5to4b', 'code');
  src.statusReason -> tgt.statusReason;
  src.businessStatus -> tgt.businessStatus;
  src.intent -> tgt.intent;
  src.priority as v -> tgt.priority = translate(v, 'http://hl7.org/fhir/uv/xver/ConceptMap/Task.priority-5to4b', 'code');
  src.code -> tgt.code;
  src.description -> tgt.description;
  src.focus -> tgt.focus;
  src.for -> tgt.for;
  src.encounter -> tgt.encounter;
  src.executionPeriod -> tgt.executionPeriod;
  src.authoredOn -> tgt.authoredOn;
  src.lastModified -> tgt.lastModified;
  src.requester -> tgt.requester;
  src.owner -> tgt.owner;
  src.location -> tgt.location;
  src.reason -> tgt.reasonCode;
  src.insurance -> tgt.insurance;
  src.note -> tgt.note;
  src.relevantHistory -> tgt.relevantHistory;
  src.restriction as s -> tgt.restriction as t then TaskRestriction(s, t);
  src.input as s -> tgt.input as t then TaskInput(s, t);
  src.output as s -> tgt.output as t then TaskOutput(s, t);
}

// group TaskPerformer(source src, target tgt) extends BackboneElement {
// src.function -> tgt.function;
// src.actor -> tgt.actor;
// }
group TaskRestriction(source src, target tgt) extends BackboneElement {
  src.repetitions -> tgt.repetitions;
  src.period -> tgt.period;
  src.recipient -> tgt.recipient;
}

group TaskInput(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type;
  src.value : base64Binary -> tgt.value "valueBase64Binary";
  src.value : boolean -> tgt.value "valueBoolean";
  src.value : canonical -> tgt.value "valueCanonical";
  src.value : code -> tgt.value "valueCode";
  src.value : date -> tgt.value "valueDate";
  src.value : dateTime -> tgt.value "valueDateTime";
  src.value : decimal -> tgt.value "valueDecimal";
  src.value : id -> tgt.value "valueId";
  src.value : instant -> tgt.value "valueInstant";
  src.value : integer -> tgt.value "valueInteger";
  src.value : integer64 -> tgt.value "valueInteger64";
  src.value : markdown -> tgt.value "valueMarkdown";
  src.value : oid -> tgt.value "valueOid";
  src.value : positiveInt -> tgt.value "valuePositiveInt";
  src.value : string -> tgt.value "valueString";
  src.value : time -> tgt.value "valueTime";
  src.value : unsignedInt -> tgt.value "valueUnsignedInt";
  src.value : uri -> tgt.value "valueUri";
  src.value : url -> tgt.value "valueUrl";
  src.value : uuid -> tgt.value "valueUuid";
  src.value : Address -> tgt.value "valueAddress";
  src.value : Age -> tgt.value "valueAge";
  src.value : Annotation -> tgt.value "valueAnnotation";
  src.value : Attachment -> tgt.value "valueAttachment";
  src.value : CodeableConcept -> tgt.value "valueCodeableConcept";
  src.value : CodeableReference -> tgt.value "valueCodeableReference";
  src.value : Coding -> tgt.value "valueCoding";
  src.value : ContactPoint -> tgt.value "valueContactPoint";
  src.value : Count -> tgt.value "valueCount";
  src.value : Distance -> tgt.value "valueDistance";
  src.value : Duration -> tgt.value "valueDuration";
  src.value : HumanName -> tgt.value "valueHumanName";
  src.value : Identifier -> tgt.value "valueIdentifier";
  src.value : Money -> tgt.value "valueMoney";
  src.value : Period -> tgt.value "valuePeriod";
  src.value : Quantity -> tgt.value "valueQuantity";
  src.value : Range -> tgt.value "valueRange";
  src.value : Ratio -> tgt.value "valueRatio";
  src.value : Reference -> tgt.value "valueReference";
  src.value : SampledData -> tgt.value "valueSampledData";
  src.value : Signature -> tgt.value "valueSignature";
  src.value : Timing -> tgt.value "valueTiming";
  src.value : ContactDetail -> tgt.value "valueContactDetail";
  src.value : DataRequirement -> tgt.value "valueDataRequirement";
  src.value : Expression -> tgt.value "valueExpression";
  src.value : ParameterDefinition -> tgt.value "valueParameterDefinition";
  src.value : RelatedArtifact -> tgt.value "valueRelatedArtifact";
  src.value : TriggerDefinition -> tgt.value "valueTriggerDefinition";
  src.value : UsageContext -> tgt.value "valueUsageContext";
  src.value : Dosage -> tgt.value "valueDosage";
  src.value : Meta -> tgt.value "valueMeta";
}

group TaskOutput(source src, target tgt) extends BackboneElement {
  src.type -> tgt.type;
  src.value : base64Binary -> tgt.value "valueBase64Binary";
  src.value : boolean -> tgt.value "valueBoolean";
  src.value : canonical -> tgt.value "valueCanonical";
  src.value : code -> tgt.value "valueCode";
  src.value : date -> tgt.value "valueDate";
  src.value : dateTime -> tgt.value "valueDateTime";
  src.value : decimal -> tgt.value "valueDecimal";
  src.value : id -> tgt.value "valueId";
  src.value : instant -> tgt.value "valueInstant";
  src.value : integer -> tgt.value "valueInteger";
  src.value : integer64 -> tgt.value "valueInteger64";
  src.value : markdown -> tgt.value "valueMarkdown";
  src.value : oid -> tgt.value "valueOid";
  src.value : positiveInt -> tgt.value "valuePositiveInt";
  src.value : string -> tgt.value "valueString";
  src.value : time -> tgt.value "valueTime";
  src.value : unsignedInt -> tgt.value "valueUnsignedInt";
  src.value : uri -> tgt.value "valueUri";
  src.value : url -> tgt.value "valueUrl";
  src.value : uuid -> tgt.value "valueUuid";
  src.value : Address -> tgt.value "valueAddress";
  src.value : Age -> tgt.value "valueAge";
  src.value : Annotation -> tgt.value "valueAnnotation";
  src.value : Attachment -> tgt.value "valueAttachment";
  src.value : CodeableConcept -> tgt.value "valueCodeableConcept";
  src.value : CodeableReference -> tgt.value "valueCodeableReference";
  src.value : Coding -> tgt.value "valueCoding";
  src.value : ContactPoint -> tgt.value "valueContactPoint";
  src.value : Count -> tgt.value "valueCount";
  src.value : Distance -> tgt.value "valueDistance";
  src.value : Duration -> tgt.value "valueDuration";
  src.value : HumanName -> tgt.value "valueHumanName";
  src.value : Identifier -> tgt.value "valueIdentifier";
  src.value : Money -> tgt.value "valueMoney";
  src.value : Period -> tgt.value "valuePeriod";
  src.value : Quantity -> tgt.value "valueQuantity";
  src.value : Range -> tgt.value "valueRange";
  src.value : Ratio -> tgt.value "valueRatio";
  src.value : Reference -> tgt.value "valueReference";
  src.value : SampledData -> tgt.value "valueSampledData";
  src.value : Signature -> tgt.value "valueSignature";
  src.value : Timing -> tgt.value "valueTiming";
  src.value : ContactDetail -> tgt.value "valueContactDetail";
  src.value : DataRequirement -> tgt.value "valueDataRequirement";
  src.value : Expression -> tgt.value "valueExpression";
  src.value : ParameterDefinition -> tgt.value "valueParameterDefinition";
  src.value : RelatedArtifact -> tgt.value "valueRelatedArtifact";
  src.value : TriggerDefinition -> tgt.value "valueTriggerDefinition";
  src.value : UsageContext -> tgt.value "valueUsageContext";
  src.value : Dosage -> tgt.value "valueDosage";
  src.value : Meta -> tgt.value "valueMeta";
}

